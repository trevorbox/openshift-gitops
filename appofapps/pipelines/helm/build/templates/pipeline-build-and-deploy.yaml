apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: build-and-deploy
spec:
  workspaces:
  - name: shared-workspace
  params:
  - name: deployment-name
    type: string
    description: name of the deployment to be patched
  - name: git-url
    type: string
    description: url of the git repo for the code of deployment
  - name: git-revision
    type: string
    description: revision to be used from repo of the code for deployment
    default: master
  - name: IMAGE
    type: string
    description: image to be build from the code
  - name: CONTEXT
    type: string
    description: path to the source code
  - name: GROUP_EMAIL
    type: string
    description: team group email to contact regarding the built image
  - name: base-image-repository
    type: string
    description: The base image repository
  - name: base-image-tag
    type: string
    description: The base image tag
    default: latest
  # - name: srcImageURL
  #   type: string
  #   description: the image to copy
  # - name: destImageURL
  #   type: string
  #   description: the destination for the image   
  tasks:
  - name: fetch-repository
    taskRef:
      name: git-clone
      kind: ClusterTask
    workspaces:
    - name: output
      workspace: shared-workspace
    params:
    - name: url
      value: $(params.git-url)
    - name: subdirectory
      value: ""
    - name: deleteExisting
      value: "true"
    - name: revision
      value: $(params.git-revision)
  - name: image-util
    workspaces:
    - name: source
      workspace: shared-workspace
    taskRef:
      name: image-util
    params:
    - name: git-revision
      value: $(params.git-revision)
    - name: repository
      value: $(params.IMAGE)
    - name: base-image-repository
      value: $(params.base-image-repository)
    - name: base-image-tag
      value: $(params.base-image-tag)
    runAfter:
    - fetch-repository
  - name: build-image
    taskRef:
      name: buildah
      kind: ClusterTask
    params:
    - name: IMAGE
      value: "$(params.IMAGE):v$(tasks.image-util.results.next-prerelease)"
    - name: CONTEXT
      value: $(params.CONTEXT)
    - name: TLSVERIFY
      value: "false"
    - name: BUILD_EXTRA_ARGS
      value: >-
        --build-arg git_origin_url="$(params.git-url)"
        --build-arg git_revision="$(tasks.fetch-repository.results.commit)"
        --build-arg base_image_repository="$(params.base-image-repository)"
        --build-arg base_image_tag="$(params.base-image-tag)"
        --build-arg base_image_digest="$(tasks.image-util.results.base-image-digest)"
        --build-arg src_version="$(tasks.image-util.results.release)"
        --build-arg created="$(tasks.image-util.results.current-datetime-iso8601)"
        --build-arg author_emails="$(params.GROUP_EMAIL)"
        --build-arg build_host="$(context.pipelineRun.namespace)/$(context.pipelineRun.name)"
        --build-arg build_id="$(context.pipelineRun.uid)"
    workspaces:
    - name: source
      workspace: shared-workspace
    runAfter:
    - image-util
  - name: push-image
    taskRef:
      name: skopeo-copy
      kind: ClusterTask
    params:
    - name: srcImageURL
      value: "docker://$(params.IMAGE):v$(tasks.image-util.results.next-prerelease)"
    - name: destImageURL
      value: "docker://$(params.IMAGE):latest"
    - name: srcTLSverify
      value: "false"
    - name: destTLSverify
      value: "false"
    workspaces:
    - name: images-url
      workspace: shared-workspace
    runAfter:
    - build-image

  - name: fetch-monorepo
    taskRef:
      name: git-clone
      kind: ClusterTask
    workspaces:
    - name: output
      workspace: shared-workspace
    params:
      - name: url
        value: https://github.com/trevorbox/openshift-gitops.git
      - name: revision
        value: "main"
      - name: subdirectory
        value: ""
      - name: deleteExisting
        value: "true"
    runAfter:
    - push-image
  - name: yq-replace
    taskRef:
      name: yq
    runAfter:
      - fetch-monorepo
    workspaces:
      - name: source
        workspace: shared-workspace
    params:
      - name: files
        value:
        - "./appofapps/deploy/helm/app/values-dev.yaml"
      - name: expression
        value: (.image.repository="$(params.IMAGE)"),(.image.tag="v$(tasks.image-util.results.next-prerelease))"
  # - name: apply-manifests
  #   taskRef:
  #     name: apply-manifests
  #   workspaces:
  #   - name: source
  #     workspace: shared-workspace
  #   runAfter:
  #   - build-image
  # - name: update-deployment
  #   taskRef:
  #     name: update-deployment
  #   params:
  #   - name: deployment
  #     value: $(params.deployment-name)
  #   - name: IMAGE
  #     value: $(params.IMAGE)
  #   runAfter:
  #   - apply-manifests
